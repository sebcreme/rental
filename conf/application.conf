# This is the main configuration file for the application.
# ~~~~~
application.name=Moving to a new flat

# pap url : 
# to have it just create a search in pap website and take the url.
# example : # http://www.pap.fr/annonce/location-appartement-divers-location-accession-loft-atelier-peniche-vide-paris-01er-g37768g37769g37770g37771g37776g37777g37778g37779g37785g37786g37787-a-partir-du-3-pieces-jusqu-a-2000-euros-a-partir-de-50-m2

#PAP
pap.url=http://www.pap.fr/annonce/vente-appartement-divers-loft-atelier-maison-paris-20e-g37787g43308-a-partir-du-3-pieces-a-partir-de-2-chambres-jusqu-a-550000-euros-a-partir-de-60-m2-40-annonces-par-page

#LBC
lbc.url=http://www.leboncoin.fr/ventes_immobilieres/offres/ile_de_france/paris/?f=a&th=1&pe=18&sqs=7&ros=3&ret=1&ret=2&location=
lbc.locations="Paris 75020"

#SLG
slg.url=http://www.seloger.com/recherche.htm?ci=750110,750111,750112,750113&idtt=1&idtypebien=1,2&org=advanced_search&px_loyerbtw=min%2f2600&surfacemin=70&ANNONCEpg=
# Application mode
# ~~~~~
# Set to dev to enable instant reloading and other development help.
# Otherwise set to prod.

application.mode=dev

%prod.application.mode=prod

application.secret=iow1na7qbmyi24tdsbbp35pnbjfulfdfo7aaz4wem46tznmry3binsytv7pffbku
play.search.reindex=enabled

http.port=9001
application.log=DEBUG

#db=postgres://postgres:c0herence@localhost/rentals
db=fs

mail.smtp=mock
%prod.application.mode=prod
%prod.db=${DATABASE_URL}
%prod.jpa.dialect=org.hibernate.dialect.PostgreSQLDialect
%prod.jpa.ddl=update

# Sendgrid heroku addon
%prod.mail.smtp.host=smtp.sendgrid.net
%prod.mail.smtp.port=587
%prod.mail.smtp.user=${SENDGRID_USERNAME}
%prod.mail.smtp.pass=${SENDGRID_PASSWORD}

#
#
# To connect to a local MySQL5 database, use:
# db=mysql:user:pwd@database_name
#
# If you need a full JDBC configuration use the following :
# db.url=jdbc:postgresql:database_name
# db.driver=org.postgresql.Driver
# db.user=root
# db.pass=secret
#
# Connections pool configuration :
# db.pool.timeout=1000
# db.pool.maxSize=30
# db.pool.minSize=10
#
# If you want to reuse an existing Datasource from your application server, use:
# db=java:/comp/env/jdbc/myDatasource

# JPA Configuration (Hibernate)
# ~~~~~
#
# Specify the custom JPA dialect to use here (default to guess):
# jpa.dialect=org.hibernate.dialect.PostgreSQLDialect
#
# Specify the ddl generation pattern to use (default to update, set to none to disable it):
# jpa.ddl=update
#
# Debug SQL statements (logged using DEBUG level):
# jpa.debugSQL=true
#
# You can even specify additional hibernate properties here:
# hibernate.use_sql_comments=true
# ...

# Memcached configuration
# ~~~~~ 
# Enable memcached if needed. Otherwise a local cache is used.
# memcached=enabled
#
# Specify memcached host (default to 127.0.0.1:11211)
# memcached.host=127.0.0.1:11211
#
# Or you can specify multiple host to build a distributed cache
# memcached.1.host=127.0.0.1:11211
# memcached.2.host=127.0.0.1:11212

# HTTP Response headers control for static files
# ~~~~~
# Set the default max-age, telling the user's browser how long it should cache the page.
# Default is 3600 (one hour). Set it to 0 to send no-cache.
# This is only read in prod mode, in dev mode the cache is disabled.
http.cacheControl=3600

# If enabled, Play will generate entity tags automatically and send a 304 when needed.
# Default is true, set it to false to deactivate use of entity tags.
http.useETag=true

# WS configuration
# ~~~~~
# If you need to set proxy params for WS requests
# http.proxyHost = localhost
# http.proxyPort = 3128
# http.proxyUser = jojo
# http.proxyPassword = jojo
	
# Mail configuration
# ~~~~~ 
# Default is to use a mock Mailer


# Or, specify mail host configuration
# mail.smtp.host=127.0.0.1
# mail.smtp.user=admin
# mail.smtp.pass=
# mail.smtp.channel=ssl

# Execution pool
# ~~~~~
# Default to 1 thread in DEV mode or (nb processors + 1) threads in PROD mode.
# Try to keep a low as possible. 1 thread will serialize all requests (very useful for debugging purpose)
play.pool=10

# Open file from errors pages
# ~~~~~
# If your text editor supports to open files using URL, Play! will link
# error pages to files dynamically
#
# Example, for textmate:
# play.editor=txmt://open?url=file://%s&line=%s

# Testing. Set up a custom configuration for test mode
# ~~~~~
#%test.module.cobertura=${play.path}/modules/cobertura
%test.application.mode=dev
%test.db=mem
%test.jpa.ddl=create-drop
%test.mail.smtp=mock

# These features will be automatically enabled in the 1.1 release
# For now you can enable them if you want
# ~~~~~
future.bindJPAObjects=true
future.escapeInTemplates=true
